#!/bin/bash
# $1: pass application name as argument without the .py extension
# example:
# bash collectdata.bash appsuite_v4_0 ryu_multipath

. ./collectdata_config.bash

# stop the controller for sure, or at least run the stop_and_clean script first
ssh -n con0 "pkill ryu-manager"
#run the controller
#concatenate the passing arguments to have applist for file name later.
i=1
applist="null"
while [ $i -le $# ]; do
  eval app=\$$i;
  if [ $applist = "null" ]
  then
    applist=$app
  else
    applist=$applist\_$app
  fi
  let i++
done
echo $applist

#applist1 has .py extension for ryu-manager to execute
i=1
applist1="detector.py"
while [ $i -le $# ]; do
  eval app=\$$i;
  if [[ $applist1 = "null" ]]
  then
    applist1="$app.py"
  else
    applist1="$applist1 $app.py"
  fi
  let i++
done

# generating routing_excluded_info file for routing app based on the presence of eplb and pplb apps
outfile=routing_excluded_info
ssh -n con0 "sh -c 'cd $APPDIR; > $outfile'" #clear file
ssh -n con0 "sh -c 'cd $APPDIR; echo $applist1 >> $outfile'"
#if [[ $applist1 != *"routing"* ]]; then
#  if [[ $applist1 == *"eplb"* ]]; then
#    ssh -n con0 "sh -c 'cd $APPDIR; sed -n 2p eplb_config_global > $outfile; sed -n 1p eplb_config_local >> $outfile'"
#  else
#    ssh -n con0 "sh -c 'cd $APPDIR; echo > $outfile; echo >> $outfile'"
#  fi
#  if [[ $applist1 == *"pplb4s"* ]]; then
#    ssh -n con0 "sh -c 'cd $APPDIR; sed -n 2p pplb4s_config_global >> $outfile; sed -n 1p pplb4s_config_local >> $outfile'"
#  else
#    ssh -n con0 "sh -c 'cd $APPDIR; echo >> $outfile; echo >> $outfile'"
#  fi
#  if [[ $applist1 == *"pplb4d"* ]]; then
#    ssh -n con0 "sh -c 'cd $APPDIR; sed -n 2p pplb4d_config_global >> $outfile; sed -n 1p pplb4d_config_local >> $outfile'"
#  else
#    ssh -n con0 "sh -c 'cd $APPDIR; echo >> $outfile; echo >> $outfile'"
#  fi
#fi


if [[ $applist1 != *"routing"* ]]; then
#if [[ $applist1 == *"plb"* ]] && [[ $applist1 != *"routing"* ]]; then
  applist1="$applist1 routing.py " #if else condition to add routing_function to plb app.
  # create global config file for routing with priority of 1 as basic function.
  file=routing_config_global
  echo "1 #priority" > $file
  echo "all #target switches" >> $file
  echo "1 #app config" >> $file
  echo >> $file
  echo "[global] #generated by the script from outer machine" >> $file
  scp $file con0:$APPDIR #con0 is the hostname of the controller0
fi

echo $applist1
# change the path to app list in the config file "collectdata_config.bash" if they are not in the folder $RYU/app/cuong
#ssh -n con0 "sh -c 'cd $RYU/app/cuong; ryu-manager --observe-links $@ &' > /dev/null 2>&1"
#ssh -n con0 "sh -c 'cd $RYU/app/cuong; ryu-manager --observe-links $applist1 &' > /dev/null 2>&1"
ssh -n con0 "sh -c 'cd $APPDIR; ryu-manager --observe-links $applist1 &' > /dev/null 2>&1"

sleep 10 #wait until the topology information is fully collected at the controller, so that all the topology-related control applications can function correctly, e.g., routing

ssh -n con0 "pgrep ryu-manager"
if [ $? -ne 0 ]; then
 echo "controller is not running, seems like applist is wrong!"
 exit 1
else 
 echo "controller is running, good!"
fi
